/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["updateUser"];
        post?: never;
        delete: operations["deleteUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/items/{itemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["updateItem"];
        post?: never;
        delete: operations["deleteItem"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/inout/orders/{orderId}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["updateStatus"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/inout/orders/{orderId}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["cancelOrder"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/companies/{companyId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["updateCompany"];
        post?: never;
        delete: operations["deleteCompany"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllUsers"];
        put?: never;
        post: operations["createUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/schedules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getSchedules"];
        put?: never;
        post: operations["createSchedule"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/racks/{rackCode}/inventory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getRackInventory"];
        put?: never;
        post: operations["updateRackInventory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/racks/initialize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["initializeRacks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rack-migration/migrate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["migrateInventoryToRack"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notifications/{id}/read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["markAsRead"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getItems"];
        put?: never;
        post: operations["createItem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/inout/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getOrders"];
        put?: never;
        post: operations["createOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/companies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getCompanies"];
        put?: never;
        post: operations["createCompany"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/racks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllRacks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/racks/{rackCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getRackByCode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/racks/section/{section}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getRacksBySection"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/racks/map": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getRacksForMap"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/racks/inventory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllRackInventories"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/racks/inventory/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getInventorySummary"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notifications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllNotifications"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/inventory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getInventory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/inventory/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getHistory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/inout/orders/{orderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getOrderDetail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dashboard/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getSummary"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dashboard/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllDashboardData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["me"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/amrs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAmrStatuses"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/schedules/{scheduleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["deleteSchedule"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        UpdateUserRequest: {
            fullName?: string;
            email?: string;
            /** @enum {string} */
            role?: "ADMIN" | "USER";
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE" | "SUSPENDED";
        };
        UserResponse: {
            /** Format: int64 */
            userId?: number;
            username?: string;
            email?: string;
            fullName?: string;
            /** @enum {string} */
            role?: "ADMIN" | "USER";
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE" | "SUSPENDED";
            /** Format: date-time */
            lastLogin?: string;
            /** Format: date-time */
            joinedAt?: string;
        };
        UpdateItemRequest: {
            itemCode?: string;
            itemName?: string;
            itemGroup?: string;
            spec?: string;
            unit?: string;
            /** Format: double */
            unitPriceIn?: number;
            /** Format: double */
            unitPriceOut?: number;
        };
        ItemResponse: {
            /** Format: int64 */
            itemId?: number;
            itemCode?: string;
            itemName?: string;
            itemGroup?: string;
            spec?: string;
            unit?: string;
            /** Format: double */
            unitPriceIn?: number;
            /** Format: double */
            unitPriceOut?: number;
        };
        UpdateOrderStatusRequest: {
            /** @enum {string} */
            status?: "PENDING" | "SCHEDULED" | "REJECTED" | "COMPLETED" | "CANCELLED";
        };
        InOutOrderResponse: {
            /** Format: int64 */
            orderId?: number;
            /** @enum {string} */
            type?: "INBOUND" | "OUTBOUND";
            status?: string;
            companyName?: string;
            companyCode?: string;
            /** Format: date */
            expectedDate?: string;
            locationCode?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            items?: components["schemas"]["OrderItemDto"][];
        };
        OrderItemDto: {
            /** Format: int64 */
            itemId?: number;
            itemName?: string;
            itemCode?: string;
            specification?: string;
            /** Format: int32 */
            requestedQuantity?: number;
            /** Format: int32 */
            processedQuantity?: number;
        };
        UpdateCompanyRequest: {
            companyCode?: string;
            companyName?: string;
            contactPerson?: string;
            contactPhone?: string;
            contactEmail?: string;
            address?: string;
            type?: string[];
        };
        CompanyResponse: {
            /** Format: int64 */
            companyId?: number;
            companyName?: string;
            companyCode?: string;
            address?: string;
            contactPerson?: string;
            contactEmail?: string;
            contactPhone?: string;
            type?: string[];
        };
        CreateUserRequest: {
            username?: string;
            password?: string;
            email?: string;
            fullName?: string;
            /** @enum {string} */
            role?: "ADMIN" | "USER";
        };
        CreateScheduleRequest: {
            title?: string;
            /** Format: date-time */
            startTime?: string;
            /** Format: date-time */
            endTime?: string;
            /** @enum {string} */
            type?: "INBOUND" | "OUTBOUND" | "INVENTORY_CHECK" | "MEETING" | "ETC";
        };
        ScheduleResponse: {
            /** Format: int64 */
            scheduleId?: number;
            title?: string;
            /** Format: date-time */
            startTime?: string;
            /** Format: date-time */
            endTime?: string;
            type?: string;
        };
        RackInventoryRequest: {
            rackCode?: string;
            /** Format: int64 */
            itemId?: number;
            /** Format: int32 */
            quantity?: number;
        };
        RackInventoryResponse: {
            /** Format: int64 */
            id?: number;
            rackCode?: string;
            /** Format: int64 */
            itemId?: number;
            itemCode?: string;
            itemName?: string;
            /** Format: int32 */
            quantity?: number;
            /** Format: date-time */
            lastUpdated?: string;
        };
        MessageResponse: {
            message?: string;
        };
        CreateItemRequest: {
            itemCode?: string;
            itemName?: string;
            itemGroup?: string;
            spec?: string;
            unit?: string;
            /** Format: double */
            unitPriceIn?: number;
            /** Format: double */
            unitPriceOut?: number;
        };
        InOutOrderRequest: {
            /** @enum {string} */
            type?: "INBOUND" | "OUTBOUND";
            /** Format: int64 */
            companyId?: number;
            /** Format: date */
            expectedDate?: string;
            locationCode?: string;
            items?: components["schemas"]["OrderItemDto"][];
        };
        CreateCompanyRequest: {
            companyName?: string;
            companyCode?: string;
            address?: string;
            contactPerson?: string;
            contactEmail?: string;
            contactPhone?: string;
            type?: string[];
        };
        LoginRequest: {
            username?: string;
            password?: string;
        };
        RackResponse: {
            /** Format: int64 */
            id?: number;
            rackCode?: string;
            section?: string;
            /** Format: int32 */
            position?: number;
            description?: string;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            inventories?: components["schemas"]["RackInventoryResponse"][];
        };
        RackMapResponse: {
            /** Format: int64 */
            id?: number;
            rackCode?: string;
            section?: string;
            /** Format: int32 */
            position?: number;
            isActive?: boolean;
            hasInventory?: boolean;
        };
        NotificationResponse: {
            /** Format: int64 */
            notificationId?: number;
            message?: string;
            /** Format: date-time */
            createdAt?: string;
            read?: boolean;
        };
        InventoryResponse: {
            /** Format: int64 */
            itemId?: number;
            itemName?: string;
            locationCode?: string;
            /** Format: int32 */
            quantity?: number;
            /** Format: date-time */
            lastUpdated?: string;
        };
        InventoryTransactionResponse: {
            /** Format: int64 */
            transactionId?: number;
            itemName?: string;
            /** Format: int32 */
            quantity?: number;
            transactionType?: string;
            /** Format: date-time */
            transactionTime?: string;
        };
        Company: {
            /** Format: int64 */
            id?: number;
            companyName?: string;
            companyCode?: string;
            address?: string;
            contactPerson?: string;
            contactEmail?: string;
            contactPhone?: string;
            type?: string[];
        };
        InOutOrder: {
            /** Format: int64 */
            id?: number;
            /** @enum {string} */
            type?: "INBOUND" | "OUTBOUND";
            /** @enum {string} */
            status?: "PENDING" | "SCHEDULED" | "REJECTED" | "COMPLETED" | "CANCELLED";
            /** Format: date */
            expectedDate?: string;
            locationCode?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            company?: components["schemas"]["Company"];
            items?: components["schemas"]["OrderItem"][];
        };
        Item: {
            /** Format: int64 */
            id?: number;
            itemCode?: string;
            itemName?: string;
            itemGroup?: string;
            spec?: string;
            unit?: string;
            /** Format: double */
            unitPriceIn?: number;
            /** Format: double */
            unitPriceOut?: number;
        };
        OrderItem: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            requestedQuantity?: number;
            /** Format: int32 */
            processedQuantity?: number;
            order?: components["schemas"]["InOutOrder"];
            item?: components["schemas"]["Item"];
        };
        AmrAnalysis: {
            /** Format: int32 */
            totalAmrs?: number;
            /** Format: int32 */
            activeAmrs?: number;
            /** Format: int32 */
            errorAmrs?: number;
            statusDistribution?: components["schemas"]["ChartData"][];
        };
        ChartData: {
            name?: string;
            /** Format: int32 */
            value?: number;
            /** Format: int32 */
            inbound?: number;
            /** Format: int32 */
            outbound?: number;
        };
        DashboardSummaryResponse: {
            inventorySummary?: components["schemas"]["InventorySummary"];
            workStatusSummary?: components["schemas"]["WorkStatusSummary"];
            inOutAnalysis?: components["schemas"]["InOutAnalysis"];
            amrAnalysis?: components["schemas"]["AmrAnalysis"];
            salesAnalysis?: components["schemas"]["SalesAnalysis"];
        };
        InOutAnalysis: {
            /** Format: int32 */
            totalInbound?: number;
            /** Format: int32 */
            totalOutbound?: number;
            /** Format: double */
            completionRate?: number;
            chartData?: components["schemas"]["ChartData"][];
        };
        InventorySummary: {
            /** Format: int32 */
            totalItems?: number;
            /** Format: int32 */
            normalStockItems?: number;
            /** Format: int32 */
            lowStockItems?: number;
            /** Format: int32 */
            outOfStockItems?: number;
            /** Format: int32 */
            totalQuantity?: number;
        };
        SalesAnalysis: {
            /** Format: double */
            totalSalesAmount?: number;
            /** Format: int32 */
            totalSalesCount?: number;
            companySalesDistribution?: components["schemas"]["ChartData"][];
            salesTrend?: components["schemas"]["ChartData"][];
        };
        WorkStatusSummary: {
            /** Format: int32 */
            completedToday?: number;
            /** Format: int32 */
            inProgressToday?: number;
            /** Format: int32 */
            pendingToday?: number;
        };
        DashboardDataResponse: {
            items?: components["schemas"]["ItemResponse"][];
            users?: components["schemas"]["UserResponse"][];
            orders?: components["schemas"]["InOutOrderResponse"][];
            inventory?: components["schemas"]["InventoryResponse"][];
            schedules?: components["schemas"]["ScheduleResponse"][];
            summary?: components["schemas"]["DashboardSummaryResponse"];
            /** Format: int64 */
            itemsLoadTime?: number;
            /** Format: int64 */
            usersLoadTime?: number;
            /** Format: int64 */
            ordersLoadTime?: number;
            /** Format: int64 */
            inventoryLoadTime?: number;
            /** Format: int64 */
            schedulesLoadTime?: number;
            /** Format: int64 */
            totalLoadTime?: number;
        };
        AmrResponse: {
            /** Format: int64 */
            amrId?: number;
            amrName?: string;
            /** @enum {string} */
            status?: "IDLE" | "MOVING" | "CHARGING" | "ERROR";
            /** Format: double */
            batteryLevel?: number;
            currentLocation?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    updateUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserResponse"];
                };
            };
        };
    };
    deleteUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    updateItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                itemId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateItemRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ItemResponse"];
                };
            };
        };
    };
    deleteItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                itemId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["MessageResponse"];
                };
            };
        };
    };
    updateStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orderId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateOrderStatusRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["InOutOrderResponse"];
                };
            };
        };
    };
    cancelOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orderId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["InOutOrderResponse"];
                };
            };
        };
    };
    updateCompany: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                companyId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCompanyRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CompanyResponse"];
                };
            };
        };
    };
    deleteCompany: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                companyId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["MessageResponse"];
                };
            };
        };
    };
    getAllUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserResponse"][];
                };
            };
        };
    };
    createUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserResponse"];
                };
            };
        };
    };
    getSchedules: {
        parameters: {
            query?: {
                start_date?: string;
                end_date?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ScheduleResponse"][];
                };
            };
        };
    };
    createSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateScheduleRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ScheduleResponse"];
                };
            };
        };
    };
    getRackInventory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                rackCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RackInventoryResponse"][];
                };
            };
        };
    };
    updateRackInventory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                rackCode: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RackInventoryRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RackInventoryResponse"];
                };
            };
        };
    };
    initializeRacks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    migrateInventoryToRack: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    markAsRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["MessageResponse"];
                };
            };
        };
    };
    getItems: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ItemResponse"][];
                };
            };
        };
    };
    createItem: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateItemRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ItemResponse"];
                };
            };
        };
    };
    getOrders: {
        parameters: {
            query?: {
                type?: "INBOUND" | "OUTBOUND";
                status?: "PENDING" | "SCHEDULED" | "REJECTED" | "COMPLETED" | "CANCELLED";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["InOutOrderResponse"][];
                };
            };
        };
    };
    createOrder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InOutOrderRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["InOutOrderResponse"];
                };
            };
        };
    };
    getCompanies: {
        parameters: {
            query?: {
                type?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CompanyResponse"][];
                };
            };
        };
    };
    createCompany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCompanyRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CompanyResponse"];
                };
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: string;
                    };
                };
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: Record<string, never>;
                    };
                };
            };
        };
    };
    getAllRacks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RackResponse"][];
                };
            };
        };
    };
    getRackByCode: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                rackCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RackResponse"];
                };
            };
        };
    };
    getRacksBySection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                section: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RackResponse"][];
                };
            };
        };
    };
    getRacksForMap: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RackMapResponse"][];
                };
            };
        };
    };
    getAllRackInventories: {
        parameters: {
            query?: {
                section?: string;
                hasStock?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RackInventoryResponse"][];
                };
            };
        };
    };
    getInventorySummary: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    getAllNotifications: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["NotificationResponse"][];
                };
            };
        };
    };
    getInventory: {
        parameters: {
            query?: {
                itemCode?: string;
                locationCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["InventoryResponse"][];
                };
            };
        };
    };
    getHistory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["InventoryTransactionResponse"][];
                };
            };
        };
    };
    getOrderDetail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orderId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["InOutOrder"];
                };
            };
        };
    };
    getSummary: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DashboardSummaryResponse"];
                };
            };
        };
    };
    getAllDashboardData: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DashboardDataResponse"];
                };
            };
        };
    };
    me: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: Record<string, never>;
                    };
                };
            };
        };
    };
    getAmrStatuses: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AmrResponse"][];
                };
            };
        };
    };
    deleteSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                scheduleId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["MessageResponse"];
                };
            };
        };
    };
}
